//‚ùìDESCRIPTION

//–°–æ–∑–¥–∞–π—Ç–µ –±–æ–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ
// —É—Ä–æ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞. –ó–¥–æ—Ä–æ–≤—å–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0.

//üê§ TESTS

//     Test.assertEquals(combat(100, 5), 95);
//     Test.assertEquals(combat(92, 8), 84);
//     Test.assertEquals(combat(20, 30), 0, "Health cannot go below 0");

//‚úÖ SOLUTION

function combat(health, damage) {
    let currentHealth = health - damage;
      return currentHealth < 0 ? 0 : currentHealth;
}

